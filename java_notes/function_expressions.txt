
## Function Expressions ##

    In JavaScript, a function is not a "magical language structure", but
    a special kind of value.

    The syntax that we used before is called a function declaration:

    function sayHi() {
        alert("Hello");
    }

    There is another syntax for creating a function that is called a function
    expression.

    It allows us to create a new function in the middle of any expression.

    For example:

    let sayHi = function() {
        alert("Hello");
    };

    Here we can see a variable sayHi getting a value, the new function,
    created as function() { alert("Hello"); }.

    As the function creation happens in the context of the assignment
    expression (to the right side of = ), this is a function expression.

    Please note, there's no name after the function keyword. Omitting a
    name is allowed for function expressions.

    Here we immediately assign it to the variable, so the meaning of these
    code samples is the same: "create a function and put it into the
    variable sayHi".

    In more advanced situations, that we'll come across later, a function
    may be created and immediately called or scheduled for a later
    execution, not stored anywhere, thus remaining anonymous.

## Function is a value ##

    Let's reiterate: no matter how the function is created, a function is
    a value. Both examples above store a function in the sayHi variable.

    We can even print out that value using alert:

    function sayHi() {
        alert("Hello");
    }

    alert(sayHi); // shows the function code.

    Please note that the last line does not run the function, because there
    are no brackets after sayHi. There are programming languages where any
    mention of a function name causes its execution, but JavaScript is
    not like that.

    In JavaScript, a function is a value, so we can deal with it as a value.
    The code above shows its string representation, which is the source code.

    Surely, a function is a special value, in the sense that we can call it
    like sayHi().

    But it's still a value. So we can work with it like with other kinds
    of values.

    We can copy a function to another variable:

    function sayHi() { // (1) create
        alert("Hello");
    }

    let func = sayHi; // (2) copy
    
    func(); // Hello    // (3) run the copy (it works)!
    sayHi(); // Hello   //  this still works too (why wouldn't it)

    Here's what happens above in detail:

    1. The function declaration (1) creates the function and puts it
    into the variable named sayHi.
    2. Line (2) copies it into the variable func. Please note again: there are no
    brackets after sayHi. If there were, thien func = sayHi() would write
    the result of the call sayHi() into func, not the function sayHi itself.
    3. Now the function can be called as both sayHi() and func().

    We could also have used a function expression to declare sayHi,
    in the first line:

    let sayHi = function() { // (1) create
        alert("Hello");
    };

    let func = sayHi;
    // ...

    Everything would work the same.

# Why is there a semi-colon at the end? #

    You might wonder, why do function expressions have a semi-colon at the end,
    but function declarations do not:

    function sayHi() {
        // ...
    }

    let sayHi = function() {
       // ...
    };

    The answer is simple: a function expression is created here as
    function(...) {...} inside the assignment statement:
    let sayHi = ...;. The semicolon ; is recommended at the end of the statement,
    it's not part of the function syntax.

    The semicolon would be there for a simpler assignment, such as let sayHi = 5;
    and it's also there for a function assignment.

## Callback Functions ##

    Let's look at more examples of passing functions as values and using function
    expressions.

    We'll write a function ask(question, yes, no) with three parameters:

    question
    text of the question
    
    yes
    Function to run if the answer is "Yes"

    The function should ask the question and, depending on the user's
    answer, call yes() or no():

    function ask(question, yes, no) {
        if (confirm(question)) yes()
        else no();
    }

    function showOkay() {
        alert("You agreed.");
    }

    function showCancel() {
        alert("You cancelled the execution");
    }

    // usage: functions showOkay, showCancel are passed as arguments to ask.
    ask("Do you agree?", showOkay, showCancel);

    In practice, such functions are quite useful. The major difference
    between a real-life ask and the example above is that real-life
    functions use more complex ways to interact with the user than a simple
    confirm. In the browser, such functions usually draw a nice-looking
    question window. But that's another story.

    The arguments showOkay and showCancel of ask are called callback functions
    or just callbacks.

    The idea is that we pass a function and expect it to be "called back"
    later if necessary. In our case, showOkay becomes the callback for "yes",
    and showCancel for "no".

    We can use function expressions to write an equivalent, shorter function:

    function ask(question, yes, no) {
        if (confirm(question)) yes()
        else no();
    }

    ask(
        "Do you agree?",
        function() { alert("You agreed.");}
        function() { alert("You cancelled the execution."); }
    )

    Here, functions are declared right inside the ask(...) call. They have
    no name, and so are called anonymous. Such functions are not accessible
    outside of ask (because they are not assigned to variables), but that'same
    just what we want here.

    Such code appears in our scripts very naturally, it's in the spirit of JavaScript.

# A function is a value representing an "action" #

    Regular values like strings or numbers represent the data.

    A function can be perceived as an action.

    We can pass it between variables and run when we want.

## Function Expression vs Function Declaration ##

    Let's formulate the key differences between function declarations
    and expressions.

    First, the syntax: how to differenciate between them in code.

    Function declaration: a function, declared as a separate statement,
    in the main code flow:

    // Function Declaration
    function sum(a, b) {
        return a + b;
    }

    Function expression: a function, created inside an expression
    or inside another syntax construct. Here, the function is created
    on the right side of the "assignment expression" = :

    // Function Expression
    let sum = function(a, b) {
        return a + b;
    };

    The more subtle difference is when a function is created by the
    JavaScript engine.

    A function expression is created when the execution reaches it and
    is usable only from that moment.

    Once the execution flow passes to the right side of the assignment
    let sum = function... - here we go, the function is created and can
    be used (assigned, called, etc) from now on.

    Function declarations are different.

    A function declaration can be aclled earlier than it is defined.

    For example, a global function declaration is visible in the whole script.
    no matter where it is.

    That's due to internal algorithms. When JavaScript prepares to run the
    script, it first looks for global function declarations in it and
    creates the functions. We can think of it as an initialisation stage.

    And after all function declarations are processed, the code is executed.
    So it has access to these functions.

    For example, this works:

    sayHi("John"); // Hello, John

    function sayHi(name) {
        alert(`Hello, $(name)` );
    }

    The function declaration sayHi is created when JavaScript is preparing
    to start the script and is visible everywhere in it.

    ...If it were a function expression, then it wouldn't work:

    sayHi("John") // error!

    let sayHi = function(name) { // (*) no magic any more
        alert(`Hello, $(name)`);
    };

    Function expressions are created when the execution reaches them.
    That would only happen in the line (*). Too late.

    Another special feature of function declarations is their block scope.

    In strict mode, when a function declaration is within a code block,
    it's visible everywhere inside that block, but not outside it.

    For instance, let's imagine that we need to declare a function
    welcome() depending on the age variable that we get during runtime.
    And then we plan to use it some time later.

    If we use function declaration, it won't work as intended:

    let age = prompt("What is your age?", 18);

    // conditionally declare a function
    if (age < 18) {

        function welcome() {
            alert("Hello!");
        }
    } else {

        function welcome() {
            alert("Greetings!");
        }
    }

    // ... use it later
    welcome(); // Error: welcome is not defined

    That's because a function declaration is only visible inside the code
    block in which it resides.

    Here's another example:

    let age = 16; // take 16 as an example

    if (age < 18) {
    welcome();               // \   (runs)
                            //  |
    function welcome() {     //  |
        alert("Hello!");       //  |  Function Declaration is available
    }                        //  |  everywhere in the block where it's declared
                            //  |
    welcome();               // /   (runs)

    } else {

    function welcome() {
        alert("Greetings!");
    }
    }

    // Here we're out of curly braces,
    // so we can not see Function Declarations made inside of them.

    welcome(); // Error: welcome is not defined

    What can we do to make welcome visible outside of if?

    The correct approach would be to use a function expression and assign
    welcome to the variable that is declared outside of if and has
    the proper visibility.

    The code works as intended:

    let age = prompt("What is your age?", 18);

    let welcome;

    if (age < 18) {

    welcome = function() {
        alert("Hello!");
    };

    } else {

    welcome = function() {
        alert("Greetings!");
    };

    }

    welcome(); // ok now

    Or we could simplofy it even further using a question mark operator ?:

    let age = prompt("What is your age?", 18);

    let welcome = (age < 18) ?
    function() { alert("Hello!"); } :
    function() { alert("Greetings!"); };

    welcome(); // ok now

## Summary ##

    Functions are values. They can be assigned, copied, or declared
    in any place of the code.

    If the function is declared as a separate statement in the main code flow,
    that's called a function declaration.

    If the function is created as part of an expression, it's called a 
    function expression.

    Function declarations are processed before the code block is executed.
    They are visible everywhere in the block.

    Function expressions are created when the execution flow reaches
    them.

    In most cases when we need to declare a function, a function
    declaration is preferable, because it is visible prior to the
    declaration itself. That gives us more flexibility in code
    organisation, and is usually more readable.

    So we should use a function expression only when function declaration
    is not fit for the tast. We've seen a couple examples of that in this
    chapter.
