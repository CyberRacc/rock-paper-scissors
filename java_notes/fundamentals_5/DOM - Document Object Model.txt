
## DOM - Document Object Model ##

    The DOM is a tree-like representation of the contents of a webpage; a tree
    of "nodes" with different relationships depending on how they're arranged
    in the HTML document.

        <div id="container">
            <div class="display"></div>
            <div class="controls"></div>
        </div>

    In the above example, the <div class="display"></div> is a "child" of
    <div id="container"></div> and a sibling to <div class="controls"></div>.
    Think of it like a family tree. <div id="container"></div> is a parent, with
    its children on the next level, each on their own "branch".

## Targeting Nodes with Selectors ##

    When working with the DOM, you use "selectors" to target the nodes you
    want to work with. YOu can use a combination of CSS-style selectors
    and relationship properties to target the nodes you want.
    Let's start with CSS-style selectors. In the above example, you
    could use the following selectors to refer to <div class="display"></div>:

        div.display

        .display

        #container > .display

        div#container > div.display

    You can also use relational selectors (i.e. firstElementChild or
    lastElementChild etc.) with special properties owned by the nodes.

        const container = document.querySelector('#container');
        // selects the #container div (don't worry about the syntax, we'll get there)

        console.dir(container.firstElementChild);                      
        // selects the first child of #container => .display

        const controls = document.querySelector('.controls');   
        // selects the .controls div

        console.dir(controls.previousElementSibling);                  
        // selects the prior sibling => .display

    So you're identifying a certain node based on its relationship to the
    nodes around it.

## DOM Methods ##

    When your HTML code is parsed by a web browser it is converted to the DOM
    as was mentioned above. One of the primary differences is that these nodes
    are objects that have many properties and methods attached to them.
    These properties and methods are the primary tools we are going to use
    to manipulate our webpage with JavaScript. We'll start with the query
    selectors; those that help you target nodes.

    # Query Selectors #

        element.querySelector(selector) returns a reference to the first
        match of the selector.

        element.querySelectorAll(selectors) returns a "nodelist" containing
        references to all of the matches of the selectors.

    There are several other, more specific queries, that offer potential
    (marginal) performance benefits, but we won't be going over them now.

    It's important to note that when using querySelectorAll, the return value
    is NOT an array. It looks like an array, and it somewhat acts like an
    array, but it's really a "nodelist". The big distinction is that several
    array methods are missing from nodelists. One solution, if problems
    arise, is to convert the nodelist into an array. You can do this with
    Array.from() or the spread operator.

    # Element Creation #

        document.createElement(tagName, [options]) creates a new element of
        tag type tagName. [options] in this case means you can add some
        optional parameters to the function. Don't worry about these at this
        point.

            const div = document.createElement("div");

        This function does NOT put your new element into the DOM; it simply
        creates it in memory. This is so you can manipulate the element
        (by adding styles, classes, ids, text, etc.) before placing it
        on the page. You can place the element into the DOM with one of
        the following methods.

    # Append Elements #

        parentNode.appendChild(childNode) appends childNode as the last child of
        parentNode

        parentNode.insertBefore(newNode, referenceNode) inserts newNode into the
        parentNode before referenceNode

    # Remove Elements #

        parentNode.removeChild(child) removes child from parentNode on the DOM
        and returns a reference to child.

    # Altering Elements #

        When you have a reference to an element, you can use that reference
        to alter the element's own properties. This allows you to do many
        useful alterations, like adding/removing and altering attributes,
        changing classes, adding inline style information and more.

            const div = document.createElement("div");
            // Creates a new div referenced in the variable "div".

    # Adding Inline Style #

        div.style.color = "blue";
        // Adds the indicated style rule.

        div.style.cssText= "color: blue; background: white;";
        // Adds several style rules.

        div.setAttribute("style", "color: blue; background: white;");
        // Adds several style rules.

    Note that if you're accessing a kebab-cased CSS rule from JS, you'll
    either need to use camelCase or you'll need to use bracket notation
    instead of dot notation.

        div.style.background-color // doesn't work - attempts to subtract color from div.style.background
        div.style.backgroundColor // accesses the div's background-color style
        div.style['background-color'] // also works
        div.style.cssText = "background-color: white;" // sets the div's background-color by assigning a CSS string

    # Editing Attributes #

        div.setAttribute("id", "theDiv");
        // if id exists, update it to "theDiv", else create an id
        // with value"theDiv"

        div.getAttribute("id");
        // returns the value of specified attribute, in this case, "theDiv".

        div.removeAttribute("id");
        // removes specified attribute.

    # Working with Classes #

        div.classList.add("new");
        // Adds class "new" to your new div.

        div.classList.remove("new");
        // Removes "new" class from div.

        div.classList.toggle("active");
        // if div doesn't have class "active" then add it, or if
        // it does, then remove it.

    It is odten standard (and cleaner) to toggle a CSS style rather than
    adding and removing inline CSS.

    # Adding Text Content #

        div.textContent = "Hello World!";
        // Creates a text node container "Hello World!" and inserts it in a div.

    # Adding HTML Content #

        div.innerHTML = "<span>Hello World!</span>";
        // Renders the HTML inside div.

    Node that textContent is preferable for adding text, and innerHTML should
    be used sparingly as it can create security risks if misused.

    
