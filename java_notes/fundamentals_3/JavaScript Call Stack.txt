
## JavaScript Call Stack ##


# Introduction to JavaScript Call Stack #

    A call stack is a way for the JavaScript engine to keep track
    of its place in code that calls multiple functions. It has the
    information on what function is currently being run and what functions
    are invoked from within that function.

    Also, the JavaScript engine uses a call stack to manage execution contexts:

        Global execution context.

        Function execution contexts.

    The call stack works based on the LIFO principle i.e., last-in-first-out.

    When you execute a script, the JavaScript engine creates a global execution
    context and pushes it on top of the call stack.

    Whenever a function is called, the JavaScript engine creates a function
    execution context for the function, pushes it on top of the call stack,
    and starts executing the function.

    If a function clls another function, the JavaScript engine creates a new
    function execution context for the function being called and pushed it to
    the top of the call stack.

    When the current function completes, the JavaScript engine pops it off
    the call stack and resumes the execution where it left off.

    The script will stop when the call stack is empty.

## JavaScript Call Stack Example ##

    Let's start with the following example:

    function add(a, b) {
        return a + b;
    }

    function average(a, b) {
        return add(a,b) / 2;
    }

    let x = average(10, 20);

    When the JavaScript engine executes this script, it places the global
    execution context (denoted by main() and global() function on the call stack.)

## Stack Overflow ##

    The call stack has a fixed size, depending on the implementation of 
    the host environment, either the web browser or node.js.

    If the number of execution contexts exceeds te size of the stack, a stack
    overflow error will occur.

    For example, when you execute a recursive function that has no exit condition,
    the JavaScript engine will issue a stack overflow error:

    function fn() {
        fn()
    }

    fn(); // stack overflow

## Asynchronous JavaScript ##

    JavaScript is a single-threaded programming language. This means that the
    JavaScript engine has only one call stack. Therefor, it can only do
    one thing at a time.

    When executing a script, the JavaScript engine executes code from top to bottom,
    line by line. In other words, it's synchronous.

    Asynchronous means the JavaScript engine can execute other tasks whilst
    waiting for another task to be completed. For example, the JavaScript
    engine can:

        Request for data from a remote server.

        Display a spinner.

        When the data is available, display it on the webpage.

    To do this, the JavaScript engine uses an event loop.

## Summary ##

    JavaScript engine uses a call stack to manage execution contexts.

    The call stack uses the stack data structure that works based on
    the LIFO (last-in-first-out) principle.
